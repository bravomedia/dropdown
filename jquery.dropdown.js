// Generated by CoffeeScript 1.6.3
(function() {
  var $;

  $ = jQuery;

  $.fn.dropdown = function(options) {
    var self, settings;
    self = this;
    settings = $.extend({
      action: 'hover',
      hoverClass: 'hover',
      activeClass: 'active',
      animationEffect: 'slide',
      animationTime: 'fast',
      touchElement: 'a',
      touchedClass: 'touched',
      itemSelector: 'li',
      dropdownSelector: 'ul'
    }, options);
    switch (settings.action) {
      case 'click':
        $(this).find(settings.itemSelector).not('.' + settings.activeClass).find(settings.dropdownSelector).hide(1, function() {
          return self.trigger('dropdownLoaded', {
            object: self
          });
        });
        $(this).find(settings.itemSelector).on('click', '>' + settings.touchElement, function() {
          return $(this).siblings(settings.dropdownSelector).slideToggle(settings.animationTime, function() {
            return self.trigger('dropdownItemActive', {
              activeObject: $(this)
            });
          });
        });
        break;
      default:
        if (settings.itemSelector === 'li') {
          settings.itemSelector = '>ul>li';
        }
        $(this).find(settings.itemSelector).find(settings.dropdownSelector).hide(1, function() {
          return self.trigger('dropdownLoaded', {
            object: self
          });
        });
        $(this).find(settings.itemSelector).hover(function() {
          clearTimeout($.data(this, 'timer'));
          switch (settings.animationEffect) {
            case 'fade':
              $(settings.dropdownSelector, this).stop(true, true).fadeIn(settings.animationTime, function() {
                return self.trigger('dropdownItemActivated', {
                  activeObject: this
                });
              });
              break;
            default:
              $(settings.dropdownSelector, this).stop(true, true).slideDown(settings.animationTime, function() {
                return self.trigger('dropdownItemActivated', {
                  activeObject: this
                });
              });
          }
          return $(this).addClass(settings.hoverClass).children(settings.touchElement).removeClass(settings.touchedClass);
        }, function() {
          return $.data(this, 'timer', setTimeout($.proxy(function() {
            switch (settings.animationEffect) {
              case 'fade':
                $(settings.dropdownSelector, this).stop(true, true).fadeOut(settings.animationTime, function() {
                  return self.trigger('dropdownItemDeactivated', {
                    activeObject: $(this)
                  });
                });
                break;
              default:
                $(settings.dropdownSelector, this).stop(true, true).slideUp(settings.animationTime, function() {
                  return self.trigger('dropdownItemDeactivated', {
                    activeObject: $(this)
                  });
                });
            }
            return $(this).removeClass(settings.hoverClass).children(settings.touchElement).addClass(settings.touchedClass);
          }, this), settings.animationTime));
        });
    }
    $("*").bind('tap', function(e) {
      var container;
      container = $('.' + settings.hoverClass);
      if (container.length) {
        if ($(this).parents().hasClass(settings.hoverClass)) {
          e.stopPropagation();
        } else {
          e.preventDefault();
          e.stopPropagation();
        }
      }
      if (container.has(e.target).length === 0) {
        return container.mouseleave();
      }
    });
    $(settings.touchElement).bind('tap', function(e) {
      if ($(this).hasClass(settings.touchedClass)) {
        if ($(this).parent('.' + settings.hoverClass).length === 0) {
          e.preventDefault();
          return $(this).removeClass(settings.touchedClass).parent().mouseenter();
        }
      }
    });
    return this;
  };

}).call(this);
